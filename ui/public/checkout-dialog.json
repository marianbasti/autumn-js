{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkout-dialog",
  "type": "registry:component",
  "dependencies": [
    "autumn-js"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "popover",
    "input",
    "accordion"
  ],
  "files": [
    {
      "path": "registry/checkout-dialog/checkout-dialog.tsx",
      "content": "\"use client\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport React, { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { getCheckoutContent } from \"@/registry/checkout-dialog/lib/checkout-content\";\nimport { useCustomer } from \"autumn-js/react\";\nimport { ArrowRight, ChevronDown, Loader2 } from \"lucide-react\";\nimport type { CheckoutResult, ProductItem } from \"autumn-js\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n} from \"@/components/ui/accordion\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\n\nexport interface CheckoutDialogProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  checkoutResult: CheckoutResult;\n}\n\nconst formatCurrency = ({\n  amount,\n  currency,\n}: {\n  amount: number;\n  currency: string;\n}) => {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: currency,\n  }).format(amount);\n};\n\nexport default function CheckoutDialog(params: CheckoutDialogProps) {\n  const { attach } = useCustomer();\n  const [checkoutResult, setCheckoutResult] = useState<\n    CheckoutResult | undefined\n  >(params?.checkoutResult);\n\n  useEffect(() => {\n    if (params.checkoutResult) {\n      setCheckoutResult(params.checkoutResult);\n    }\n  }, [params.checkoutResult]);\n\n  const [loading, setLoading] = useState(false);\n\n  if (!checkoutResult) {\n    return <></>;\n  }\n\n  const { open, setOpen } = params;\n  const { title, message } = getCheckoutContent(checkoutResult);\n\n  const isFree = checkoutResult?.product.properties?.is_free;\n  const isPaid = isFree === false;\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className=\"p-0 pt-4 gap-0 text-foreground text-sm\">\n        <DialogTitle className=\"px-6 mb-1\">{title}</DialogTitle>\n        <div className=\"px-6 mt-1 mb-4 text-muted-foreground\">\n          {message}\n        </div>\n\n        {isPaid && checkoutResult && (\n          <PriceInformation\n            checkoutResult={checkoutResult}\n            setCheckoutResult={setCheckoutResult}\n          />\n        )}\n\n        <DialogFooter className=\"flex flex-col sm:flex-row justify-between gap-x-4 py-2 pl-6 pr-3 bg-secondary border-t shadow-inner\">\n          <Button\n            size=\"sm\"\n            onClick={async () => {\n              setLoading(true);\n\n              const options = checkoutResult.options.map((option) => {\n                return {\n                  featureId: option.feature_id,\n                  quantity: option.quantity,\n                };\n              });\n\n              await attach({\n                productId: checkoutResult.product.id,\n                options,\n              });\n              setOpen(false);\n              setLoading(false);\n            }}\n            disabled={loading}\n            className=\"min-w-16 flex items-center gap-2\"\n          >\n            {loading ? (\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <>\n                <span className=\"whitespace-nowrap flex gap-1\">\n                  Confirm\n                </span>\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction PriceInformation({\n  checkoutResult,\n  setCheckoutResult,\n}: {\n  checkoutResult: CheckoutResult;\n  setCheckoutResult: (checkoutResult: CheckoutResult) => void;\n}) {\n  return (\n    <div className=\"px-6 mb-4 flex flex-col gap-4\">\n      <ProductItems\n        checkoutResult={checkoutResult}\n        setCheckoutResult={setCheckoutResult}\n      />\n\n      <div className=\"flex flex-col gap-2\">\n        {checkoutResult?.has_prorations && checkoutResult.lines.length > 0 && (\n          <CheckoutLines checkoutResult={checkoutResult} />\n        )}\n        <DueAmounts checkoutResult={checkoutResult} />\n      </div>\n    </div>\n  );\n}\n\nfunction DueAmounts({ checkoutResult }: { checkoutResult: CheckoutResult }) {\n  const { next_cycle, product } = checkoutResult;\n  const nextCycleAtStr = next_cycle\n    ? new Date(next_cycle.starts_at).toLocaleDateString()\n    : undefined;\n\n  const hasUsagePrice = product.items.some(\n    (item) => item.usage_model === \"pay_per_use\"\n  );\n\n  const showNextCycle = next_cycle && next_cycle.total !== checkoutResult.total;\n\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <div className=\"flex justify-between\">\n        <div>\n          <p className=\"font-medium text-md\">Total due today</p>\n        </div>\n\n        <p className=\"font-medium text-md\">\n          {formatCurrency({\n            amount: checkoutResult?.total,\n            currency: checkoutResult?.currency,\n          })}\n        </p>\n      </div>\n      {showNextCycle && (\n        <div className=\"flex justify-between text-muted-foreground\">\n          <div>\n            <p className=\"text-md\">Due next cycle ({nextCycleAtStr})</p>\n          </div>\n          <p className=\"text-md\">\n            {formatCurrency({\n              amount: next_cycle.total,\n              currency: checkoutResult?.currency,\n            })}\n            {hasUsagePrice && <span> + usage prices</span>}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ProductItems({\n  checkoutResult,\n  setCheckoutResult,\n}: {\n  checkoutResult: CheckoutResult;\n  setCheckoutResult: (checkoutResult: CheckoutResult) => void;\n}) {\n  const isUpdateQuantity =\n    checkoutResult?.product.scenario === \"active\" &&\n    checkoutResult.product.properties.updateable;\n\n  const isOneOff = checkoutResult?.product.properties.is_one_off;\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <p className=\"text-sm font-medium\">Price</p>\n      {checkoutResult?.product.items\n        .filter((item) => item.type !== \"feature\")\n        .map((item, index) => {\n          if (item.usage_model == \"prepaid\") {\n            return (\n              <PrepaidItem\n                key={index}\n                item={item}\n                checkoutResult={checkoutResult!}\n                setCheckoutResult={setCheckoutResult}\n              />\n            );\n          }\n\n          if (isUpdateQuantity) {\n            return null;\n          }\n\n          return (\n            <div key={index} className=\"flex justify-between\">\n              <p className=\"text-muted-foreground\">\n                {item.feature\n                  ? item.feature.name\n                  : isOneOff\n                    ? \"Price\"\n                    : \"Subscription\"}\n              </p>\n              <p>\n                {item.display?.primary_text} {item.display?.secondary_text}\n              </p>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nfunction CheckoutLines({ checkoutResult }: { checkoutResult: CheckoutResult }) {\n  return (\n    <Accordion type=\"single\" collapsible>\n      <AccordionItem value=\"total\" className=\"border-b-0\">\n        <CustomAccordionTrigger className=\"justify-between w-full my-0 py-0 border-none\">\n          <div className=\"cursor-pointer flex items-center gap-1 w-full justify-end\">\n            <p className=\"font-light text-muted-foreground\">\n              View details\n            </p>\n            <ChevronDown\n              className=\"text-muted-foreground mt-0.5 rotate-90 transition-transform duration-200 ease-in-out\"\n              size={14}\n            />\n          </div>\n        </CustomAccordionTrigger>\n        <AccordionContent className=\"mt-2 mb-0 pb-2 flex flex-col gap-2\">\n          {checkoutResult?.lines\n            .filter((line) => line.amount != 0)\n            .map((line, index) => {\n              return (\n                <div key={index} className=\"flex justify-between\">\n                  <p className=\"text-muted-foreground\">{line.description}</p>\n                  <p className=\"text-muted-foreground\">\n                    {new Intl.NumberFormat(\"en-US\", {\n                      style: \"currency\",\n                      currency: checkoutResult?.currency,\n                    }).format(line.amount)}\n                  </p>\n                </div>\n              );\n            })}\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n\nfunction CustomAccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]_svg]:rotate-0\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n}\n\nconst PrepaidItem = ({\n  item,\n  checkoutResult,\n  setCheckoutResult,\n}: {\n  item: ProductItem;\n  checkoutResult: CheckoutResult;\n  setCheckoutResult: (checkoutResult: CheckoutResult) => void;\n}) => {\n  const { quantity = 0, billing_units: billingUnits = 1 } = item;\n  const [quantityInput, setQuantityInput] = useState<string>(\n    (quantity / billingUnits).toString()\n  );\n  const { checkout } = useCustomer();\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const scenario = checkoutResult.product.scenario;\n\n  const handleSave = async () => {\n    setLoading(true);\n    try {\n      const newOptions = checkoutResult.options\n        .filter((option) => option.feature_id !== item.feature_id)\n        .map((option) => {\n          return {\n            featureId: option.feature_id,\n            quantity: option.quantity,\n          };\n        });\n\n      newOptions.push({\n        featureId: item.feature_id!,\n        quantity: Number(quantityInput) * billingUnits,\n      });\n\n      const { data, error } = await checkout({\n        productId: checkoutResult.product.id,\n        options: newOptions,\n        dialog: CheckoutDialog,\n      });\n\n      if (error) {\n        console.error(error);\n        return;\n      }\n      setCheckoutResult(data!);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n      setOpen(false);\n    }\n  };\n\n  const disableSelection = scenario === \"renew\";\n\n  return (\n    <div className=\"flex justify-between gap-2\">\n      <div className=\"flex gap-2 items-start\">\n        <p className=\"text-muted-foreground\">{item.feature?.name}</p>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger\n            className={cn(\n              \"text-muted-foreground text-xs px-1 py-0.5 rounded-md flex items-center gap-1 bg-accent/80 shrink-0\",\n              disableSelection !== true &&\n                \"hover:bg-accent hover:text-foreground\"\n            )}\n            disabled={disableSelection}\n          >\n            Qty: {quantity}\n            <ChevronDown size={12} />\n          </PopoverTrigger>\n          <PopoverContent\n            align=\"start\"\n            className=\"w-80 text-sm p-4 pt-3 flex flex-col gap-4\"\n          >\n            <div className=\"flex flex-col gap-1\">\n              <p className=\"text-sm font-medium\">{item.feature?.name}</p>\n              <p className=\"text-muted-foreground\">\n                {item.display?.primary_text} {item.display?.secondary_text}\n              </p>\n            </div>\n\n            <div className=\"flex justify-between items-end\">\n              <div className=\"flex gap-2 items-center\">\n                <Input\n                  className=\"h-7 w-16 focus:!ring-2\"\n                  value={quantityInput}\n                  onChange={(e) => setQuantityInput(e.target.value)}\n                />\n                <p className=\"text-muted-foreground\">\n                  {billingUnits > 1 && `x ${billingUnits} `}\n                  {item.feature?.name}\n                </p>\n              </div>\n\n              <Button\n                onClick={handleSave}\n                className=\"w-14 !h-7\"\n                // text-sm items-center bg-white text-foreground shadow-sm border border-zinc-200 hover:bg-zinc-100\n                disabled={loading}\n              >\n                {loading ? (\n                  <Loader2 className=\"text-muted-foreground animate-spin !w-4 !h-4\" />\n                ) : (\n                  \"Save\"\n                )}\n              </Button>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n      <p className=\"text-end\">\n        {item.display?.primary_text} {item.display?.secondary_text}\n      </p>\n    </div>\n  );\n};\n\nexport const PriceItem = ({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col pb-4 sm:pb-0 gap-1 sm:flex-row justify-between sm:h-7 sm:gap-2 sm:items-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogButton = ({\n  children,\n  size,\n  onClick,\n  disabled,\n  className,\n}: {\n  children: React.ReactNode;\n  size?: \"sm\" | \"lg\" | \"default\" | \"icon\";\n  onClick: () => void;\n  disabled?: boolean;\n  className?: string;\n}) => {\n  return (\n    <Button\n      onClick={onClick}\n      disabled={disabled}\n      size={size}\n      className={cn(className, \"shadow-sm shadow-stone-400\")}\n    >\n      {children}\n      <ArrowRight className=\"!h-3\" />\n    </Button>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/autumn/checkout-dialog.tsx"
    },
    {
      "path": "registry/checkout-dialog/lib/checkout-content.tsx",
      "content": "import { type CheckoutResult } from \"autumn-js\";\n\nexport const getCheckoutContent = (checkoutResult: CheckoutResult) => {\n  const { product, current_product, next_cycle } = checkoutResult;\n  const { is_one_off, is_free, has_trial, updateable } = product.properties;\n  const scenario = product.scenario;\n\n  const nextCycleAtStr = next_cycle\n    ? new Date(next_cycle.starts_at).toLocaleDateString()\n    : undefined;\n\n  const productName = product.name;\n\n  if (is_one_off) {\n    return {\n      title: <p>Purchase {productName}</p>,\n      message: (\n        <p>\n          By clicking confirm, you will purchase {productName} and your card\n          will be charged immediately.\n        </p>\n      ),\n    };\n  }\n\n  if (scenario == \"active\" && updateable) {\n    if (updateable) {\n      return {\n        title: <p>Update Plan</p>,\n        message: (\n          <p>\n            Update your prepaid quantity. You&apos;ll be charged or credited the\n            prorated difference based on your current billing cycle.\n          </p>\n        ),\n      };\n    }\n  }\n\n  if (has_trial) {\n    return {\n      title: <p>Start trial for {productName}</p>,\n      message: (\n        <p>\n          By clicking confirm, you will start a free trial of {productName}{\" \"}\n          which ends on {nextCycleAtStr}.\n        </p>\n      ),\n    };\n  }\n\n  switch (scenario) {\n    case \"scheduled\":\n      return {\n        title: <p>{productName} product already scheduled</p>,\n        message: (\n          <p>\n            You are currently on product {current_product.name} and are\n            scheduled to start {productName} on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"active\":\n      return {\n        title: <p>Product already active</p>,\n        message: <p>You are already subscribed to this product.</p>,\n      };\n\n    case \"new\":\n      if (is_free) {\n        return {\n          title: <p>Enable {productName}</p>,\n          message: (\n            <p>\n              By clicking confirm, {productName} will be enabled immediately.\n            </p>\n          ),\n        };\n      }\n\n      return {\n        title: <p>Subscribe to {productName}</p>,\n        message: (\n          <p>\n            By clicking confirm, you will be subscribed to {productName} and\n            your card will be charged immediately.\n          </p>\n        ),\n      };\n    case \"renew\":\n      return {\n        title: <p>Renew</p>,\n        message: (\n          <p>\n            By clicking confirm, you will renew your subscription to{\" \"}\n            {productName}.\n          </p>\n        ),\n      };\n\n    case \"upgrade\":\n      return {\n        title: <p>Upgrade to {productName}</p>,\n        message: (\n          <p>\n            By clicking confirm, you will upgrade to {productName} and your\n            payment method will be charged immediately.\n          </p>\n        ),\n      };\n\n    case \"downgrade\":\n      return {\n        title: <p>Downgrade to {productName}</p>,\n        message: (\n          <p>\n            By clicking confirm, your current subscription to{\" \"}\n            {current_product.name} will be cancelled and a new subscription to{\" \"}\n            {productName} will begin on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"cancel\":\n      return {\n        title: <p>Cancel</p>,\n        message: (\n          <p>\n            By clicking confirm, your subscription to {current_product.name}{\" \"}\n            will end on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    default:\n      return {\n        title: <p>Change Subscription</p>,\n        message: <p>You are about to change your subscription.</p>,\n      };\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/autumn/checkout-content.tsx"
    }
  ]
}